package com.vDev.Cupid.Model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data // Generates getters, setters, `equals`, `hashCode`, and `toString`
@NoArgsConstructor // Generates a no-args constructor
@AllArgsConstructor // Generates an all-args constructor
@Builder // Provides a builder pattern for creating instances

//DynamoDB doesn't automatically create Table for you. So, you should always make 1 through UI. It seems to create attributes on the fly like below
@DynamoDBTable(tableName = "Users") // validates if the DynamoDB table exists or not.DynamoDB does not create collection automatically so it is important to create dynamodb before hand
public class User {
    @DynamoDBHashKey(attributeName = "userId")
    @DynamoDBAutoGeneratedKey
    private String userId;               // Unique identifier, used as the hash key for the table
    @DynamoDBAttribute(attributeName = "name") //use parameter if you want to give a different name or by default it takes the same name
    private String name;                 // Name or username
    @DynamoDBAttribute(attributeName = "age")
    private int age;                     // Age
    @DynamoDBAttribute(attributeName = "location")
    private String location;             // Location or city
    @DynamoDBAttribute(attributeName = "occupation")
    private String occupation;           // Occupation or profession
    @DynamoDBAttribute(attributeName = "sex")
    private String sex;                  // Sex or gender
    @DynamoDBAttribute(attributeName = "typeOfRelationship")
    private String typeOfRelationship;   // Type of relationship (e.g., casual, serious, friendship)
    @DynamoDBAttribute(attributeName = "email")
    private String email;                // Email address
    @DynamoDBAttribute(attributeName = "profileImageUrl")
    private String profileImageUrl;      // URL to profile image
    @DynamoDBAttribute(attributeName = "description")
    private String description;          // Brief description or bio
    @DynamoDBAttribute(attributeName = "interests")
    private List<String> interests;      // List of interests or hobbies
    @DynamoDBAttribute(attributeName = "matchPreferences")
    private String matchPreferences;     // Match preferences (e.g., age range, location)


}
